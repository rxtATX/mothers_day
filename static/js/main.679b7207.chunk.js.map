{"version":3,"sources":["utility/API.js","utility/actions.js","utility/classGame.js","utility/GlobalState.js","components/LettersMatrix.js","components/UI/Dialog.js","components/ConfigClues.js","components/GuessDisplay.js","components/SelectedLetters.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["twoDArray","colors","light","base","dark","findWordGroups","getRandom","length","len","Math","floor","random","recursiveGetWord","data","word","replace","validateWord","dispatchGetWord","dispatch","wordGroups","Promise","all","map","group","letter","num","q","i","fetch","getWord","then","res","el","json","third","fourth","first","second","arr","filter","join","reduce","a","b","type","payload","catch","err","console","log","PuzzleMaker","words","this","moveTypes","puzzle","puzzleLength","letterCount","currentCoords","wordPath","getParameters","sqrt","sampleRow","push","JSON","parse","stringify","x","generateRandomNumber","y","generateRandomCoordinates","trapped","j","checkCoords","Error","nextMove","generateEmptyPuzzle","message","generatePuzzle","defaultState","hintPreference","localStorage","getItem","currentGuess","finalizedWords","correctMap","currentWordProgress","GameplayContext","createContext","id","name","priority","Provider","reducer","state","action","finalizedWordPath","forEach","coord","GameplayProvider","value","props","useReducer","useGameplayContext","useContext","useStyles","makeStyles","theme","root","flexGrow","fab","textAlign","color","textShadow","fontSize","fontWeight","padding","spacing","width","height","margin","transform","hidden","visibility","activated","backgroundColor","palette","secondary","LettersMatrix","letterPress","classes","FormRow","subLetters","row","Button","useState","animate","setAnimate","useEffect","Fab","style","backgroundImage","onClick","e","persist","className","Fragment","Grid","item","key","container","justify","xs","display","alignItems","justifyContent","paperFullScreen","button","borderRadius","lineHeight","background","main","marginBottom","title","marginTop","Transition","React","forwardRef","ref","Slide","direction","DialogEl","buttonElement","textContent","children","accept","show","outsideClose","open","setOpen","handleClose","cloneElement","Dialog","scrollPaper","fullScreen","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","paper","text","hintButton","position","top","right","ButtonElement","IconButton","ConfigClues","dispatchGetHint","checked","setChecked","variant","setItem","FormControlLabel","control","Checkbox","onChange","label","minHeight","GuessDisplay","classesApplied","classAttr","getColor","guess","size","fontVariant","start","marginLeft","paddingLeft","end","marginRight","center","SelectedLetters","index","split","Paper","determineRender","color1","color2","color3","color4","linearRoot","animation","plopAnimate","MainPage","setWordGroups","setShow","tryAgain","setTryAgain","gameWinTimer","mockLetterPress","openIndex","indexOf","randWordgroups","setTimeout","clearTimeout","skippedArr","Object","keys","Typography","gutterBottom","LinearProgress","colorPrimary","barColorPrimary","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.679b7207.chunk.js","sourcesContent":["import * as actions from './actions';\nconst alpha = \"qwertyuiopasdfghjklzxcvbnm\";\nconst twoDArray = [\n    [4, 4, 4, 4],\n    [5, 6, 5],\n    [5, 4]\n]\nexport const colors = [\n    { light: '#ef9a9a', base: '#e57373', dark: '#ef5350' },\n    { light: '#ce93d8', base: '#ba68c8', dark: '#ab47bc' },\n    { light: '#90caf9', base: '#64b5f6', dark: '#42a5f5' },\n    { light: '#80deea', base: '#4dd0e1', dark: '#26c6da' },\n    { light: '#80cbc4', base: '#4db6ac', dark: '#26a69a' },\n    { light: '#fff59d', base: '#fff176', dark: '#ffee58' },\n    { light: '#ffcc80', base: '#ffb74d', dark: '#ffa726' },\n    { light: '#ec407a', base: '#e91e63', dark: '#d81b60' },\n    { light: '#f48fb1', base: '#f06292', dark: '#ec407a' },\n    { light: '#ef9a9a', base: '#e57373', dark: '#ef5350' },\n    { light: '#ce93d8', base: '#ba68c8', dark: '#ab47bc' },\n    { light: '#90caf9', base: '#64b5f6', dark: '#42a5f5' },\n    { light: '#80deea', base: '#4dd0e1', dark: '#26c6da' },\n    { light: '#80cbc4', base: '#4db6ac', dark: '#26a69a' },\n    { light: '#fff59d', base: '#fff176', dark: '#ffee58' },\n    { light: '#ffcc80', base: '#ffb74d', dark: '#ffa726' },\n    { light: '#ec407a', base: '#e91e63', dark: '#d81b60' },\n    { light: '#f48fb1', base: '#f06292', dark: '#ec407a' },\n]\nexport function findWordGroups() {\n    return twoDArray[getRandom(twoDArray.length)]\n}\n\nexport function getRandom(len) {\n    return Math.floor(Math.random() * len)\n}\nexport function getLetter(rand) {\n    return alpha[rand]\n}\nexport function getWord(letter, num) {\n    let q = \"\"\n    for (let i = 0; i < num - 1; i++) {\n        q += \"?\"\n    }\n    return fetch(`https://cors-anywhere.herokuapp.com/https://api.datamuse.com/words?sp=${letter}${q}`)\n}\n\nfunction recursiveGetWord(data) {\n    let word = data[getRandom(data.length)].word;\n    if (!validateWord(word)) {\n        recursiveGetWord(data)\n    }\n    else return word\n}\n\nfunction validateWord(word) {\n    return word.replace(/[^a-zA-Z]/gmi, '') === word\n}\n\nexport function dispatchGetWord(dispatch) {\n    let wordGroups = findWordGroups();\n    Promise.all(wordGroups.map(group => getWord(getLetter(getRandom(26)), group)))\n        .then(res => res.map(el => el.json()))\n        .then(res => {\n            Promise.all(res)\n                .then(data => {\n                    let first = recursiveGetWord(data[0])\n                    let second = recursiveGetWord(data[1])\n                    let third, fourth;\n                    if (data[2]) {\n                        third = recursiveGetWord(data[2])\n                    }\n                    if (data[3]) {\n                        fourth = recursiveGetWord(data[3])\n                    }\n                    let arr = [first, second, third, fourth].filter(el => el)\n                    if (arr.length === wordGroups.length && arr.join(\"\").length === wordGroups.reduce((a, b) => a + b)) {\n                        dispatch({\n                            type: actions.SET_PUZZLE_CONSTRUCTOR,\n                            payload: arr\n                        })\n                    } else {\n                        dispatchGetWord(dispatch)\n                    }\n                })\n        })\n        .catch(err => console.log(err));\n}","export const SET_PUZZLE_CONSTRUCTOR = 'SET_PUZZLE_CONSTRUCTOR';\n\nexport const SET_HINT_PREFERENCE = 'SET_HINT_PREFERENCE';\n\nexport const LETTER_PRESS = \"LETTER_PRESS\";\n\nexport const RESET_GUESSES = \"RESET_GUESSES\"\n\nexport const CURRENT_WORD_PROGRESS = \"CURRENT_WORD_PROGRESS\";\n\nexport const FINALIZE_WORD = \"FINALIZE_WORD\";\n\nexport const CORRECT_MAP = \"CORRECT_MAP\";","export default class PuzzleMaker {\n\tconstructor(words) {\n\t\tthis.words = words;\n\t\tthis.moveTypes = [-1, 0, 1];\n\t\tthis.puzzle = [];\n\t\tthis.puzzleLength = 0;\n\t\tthis.letterCount = 0;\n\t\tthis.currentCoords = {};\n\t\tthis.wordPath = {};\n\t\tthis.getParameters();\n\t}\n\n\tgetParameters() {\n\t\tthis.letterCount = 0;\n\t\tfor (let word of this.words) {\n\t\t\tthis.letterCount += word.length;\n\t\t}\n\n\t\tthis.puzzleLength = Math.sqrt(this.letterCount);\n\t}\n\n\tgenerateEmptyPuzzle() {\n\t\tthis.puzzle = [];\n\t\tconst sampleRow = [];\n\n\t\tfor (let i = 0; i < this.puzzleLength; i++) {\n\t\t\tsampleRow.push(0);\n\t\t}\n\n\t\tfor (let i = 0; i < this.puzzleLength; i++) {\n\t\t\tthis.puzzle.push(JSON.parse(JSON.stringify(sampleRow)));\n\t\t}\n\t}\n\n\tgenerateRandomNumber() {\n\t\treturn Math.floor(Math.random() * (this.puzzleLength));\n\t}\n\n\tgenerateRandomCoordinates() {\n\t\tthis.currentCoords = {\n\t\t\tx: this.generateRandomNumber(),\n\t\t\ty: this.generateRandomNumber()\n\t\t};\n\n\t\tif (this.puzzle[this.currentCoords.x][this.currentCoords.y]) {\n\t\t\tthis.generateRandomCoordinates();\n\t\t}\n\t}\n\n\tcheckCoords() {\n\t\tlet trapped = true;\n\t\tfor (var i = 0; i < this.moveTypes.length; i++) {\n\t\t\tfor (var j = 0; j < this.moveTypes.length; j++) {\n\t\t\t\tconst x = this.currentCoords.x + this.moveTypes[i];\n\t\t\t\tconst y = this.currentCoords.y + this.moveTypes[j];\n\n\t\t\t\tif (x !== -1 && y !== -1 && x !== this.puzzleLength && y !== this.puzzleLength) {\n\t\t\t\t\tif (!this.puzzle[x][y]) {\n\t\t\t\t\t\ttrapped = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn trapped;\n\t}\n\n\tnextMove() {\n\t\tif (this.checkCoords()) {\n\t\t\tthrow new Error()\n\t\t}\n\n\t\tlet x = this.currentCoords.x + this.moveTypes[Math.floor(Math.random() * this.moveTypes.length)];\n\t\tlet y = this.currentCoords.y + this.moveTypes[Math.floor(Math.random() * this.moveTypes.length)];\n\n\t\tif (x === -1\n\t\t\t|| y === -1\n\t\t\t|| x === this.puzzleLength\n\t\t\t|| y === this.puzzleLength\n\t\t\t|| this.puzzle[x][y]\n\t\t) {\n\t\t\tthis.nextMove();\n\t\t} else {\n\t\t\tthis.currentCoords = { x: x, y: y };\n\t\t}\n\t}\n\n\tgeneratePuzzle() {\n\t\tthis.generateEmptyPuzzle();\n\n\t\ttry {\n\n\t\t\tfor (let word of this.words) {\n\t\t\t\tthis.generateRandomCoordinates();\n\t\t\t\tthis.wordPath[word] = [];\n\n\t\t\t\tfor (let letter of word) {\n\t\t\t\t\tthis.nextMove();\n\t\t\t\t\tthis.puzzle[this.currentCoords.x][this.currentCoords.y] = letter;\n\t\t\t\t\tthis.wordPath[word].push(this.currentCoords);\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (!err.message) return this.generatePuzzle();\n\n\t\t\tthrow err\n\t\t}\n\t}\n\n\tgetPuzzle() {\n\t\treturn this.puzzle;\n\t}\n\tgetPuzzelPath() {\n\t\treturn this.wordPath\n\t}\n}\n\n// const threeWords = new PuzzleMaker([\"which\", \"irony\", \"hamper\"]);\n\n// const print = function (puzzle){\n// \tif(puzzle.length === 5){\n// \t\tconsole.log(`${puzzle[0][0]}-${puzzle[0][1]}-${puzzle[0][2]}-${puzzle[0][3]}-${puzzle[0][4]}`);\n// \t\tconsole.log('-----------');\n// \t\tconsole.log(`${puzzle[1][0]}-${puzzle[1][1]}-${puzzle[1][2]}-${puzzle[1][3]}-${puzzle[1][4]}`);\n// \t\tconsole.log('-----------');\n// \t\tconsole.log(`${puzzle[2][0]}-${puzzle[2][1]}-${puzzle[2][2]}-${puzzle[2][3]}-${puzzle[2][4]}`);\n// \t\tconsole.log('-----------');\n// \t\tconsole.log(`${puzzle[3][0]}-${puzzle[3][1]}-${puzzle[3][2]}-${puzzle[3][3]}-${puzzle[3][4]}`);\n// \t\tconsole.log('-----------');\n// \t\tconsole.log(`${puzzle[4][0]}-${puzzle[4][1]}-${puzzle[4][2]}-${puzzle[4][3]}-${puzzle[4][4]}`);\n// \t} else if(puzzle.length === 4){\n// \t\tconsole.log(`${puzzle[0][0]}-${puzzle[0][1]}-${puzzle[0][2]}-${puzzle[0][3]}`);\n// \t\tconsole.log('-----------');\n// \t\tconsole.log(`${puzzle[1][0]}-${puzzle[1][1]}-${puzzle[1][2]}-${puzzle[1][3]}`);\n// \t\tconsole.log('-----------');\n// \t\tconsole.log(`${puzzle[2][0]}-${puzzle[2][1]}-${puzzle[2][2]}-${puzzle[2][3]}`);\n// \t\tconsole.log('-----------');\n// \t\tconsole.log(`${puzzle[3][0]}-${puzzle[3][1]}-${puzzle[3][2]}-${puzzle[3][3]}`);\n// \t} else {\n// \t\tconsole.log(`${puzzle[0][0]}-${puzzle[0][1]}-${puzzle[0][2]}`);\n// \t\tconsole.log('-----------');\n// \t\tconsole.log(`${puzzle[1][0]}-${puzzle[1][1]}-${puzzle[1][2]}`);\n// \t\tconsole.log('-----------');\n// \t\tconsole.log(`${puzzle[2][0]}-${puzzle[2][1]}-${puzzle[2][2]}`);\n// \t}\n// }\n// threeWords.generatePuzzle();\n\n// print(threeWords.getPuzzle())\n// console.log(threeWords.getPuzzelPath());\n// console.log(threeWords.count);\n\n\n// const alpha = ['abcd', 'efgh', 'ijkl', 'mnopq', 'rstu','vwxy'];\n// const five = new PuzzleMaker(alpha);\n// five.generatePuzzle();\n// print(five.getPuzzle())\n// console.log(five.getPuzzelPath());\n// console.log(five.count);\n\n","import React, { createContext, useReducer, useContext } from \"react\";\nimport * as actions from './actions';\nimport PuzzleMaker from \"./classGame\";\n\nconst defaultState = {\n    hintPreference: JSON.parse(localStorage.getItem(\"preference\")) || false,\n    currentGuess: [],\n    finalizedWords: {},\n    correctMap: {},\n    currentWordProgress: \"\"\n}\n\nconst GameplayContext = createContext({\n    id: \"\",\n    name: \"\",\n    priority: false\n});\nconst { Provider } = GameplayContext;\n\nfunction reducer(state = defaultState, action) {\n    switch (action.type) {\n        case actions.SET_PUZZLE_CONSTRUCTOR:\n            let puzzle = new PuzzleMaker(action.payload);\n            puzzle.generatePuzzle();\n\n            if (puzzle.length % 2 !== 0) {\n                puzzle = new PuzzleMaker(action.payload)\n                puzzle.generatePuzzle()\n            }\n            return {\n                ...state,\n                ...defaultState,\n                puzzle,\n            }\n        case actions.SET_HINT_PREFERENCE:\n            return {\n                ...state,\n                hintPreference: action.payload\n            }\n        case actions.LETTER_PRESS:\n            return {\n                ...state,\n                currentGuess: [\n                    ...state.currentGuess,\n                    action.payload\n                ]\n            }\n        case actions.RESET_GUESSES:\n            return {\n                ...state,\n                currentGuess: []\n            }\n        case actions.CURRENT_WORD_PROGRESS:\n            return {\n                ...state,\n                currentWordProgress: action.payload\n            }\n        case actions.FINALIZE_WORD:\n            let finalizedWordPath = state.puzzle.wordPath[action.payload]\n            if (finalizedWordPath) finalizedWordPath.forEach(coord => {\n                state.puzzle.puzzle[coord.x][coord.y] = false\n            })\n            return {\n                ...state,\n                finalizedWords: {\n                    ...state.finalizedWords,\n                    [action.payload]: true,\n                },\n                currentWordProgress: ''\n            }\n        case actions.CORRECT_MAP:\n            return {\n                ...state,\n                correctMap: action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nfunction GameplayProvider({ value = {}, ...props }) {\n    const [state, dispatch] = useReducer(reducer, defaultState);\n\n    return <Provider value={[state, dispatch]} {...props} />;\n}\n\nfunction useGameplayContext() {\n    return useContext(GameplayContext);\n}\n\nexport { GameplayProvider, useGameplayContext };\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\nimport Grid from '@material-ui/core/Grid';\nimport { colors } from '../utility/API';\nimport { useGameplayContext } from '../utility/GlobalState';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  fab: {\n    textAlign: 'center',\n    color: 'white',\n    textShadow: '0px 1px 2px black',\n    fontSize: '1.25em',\n    fontWeight: '700',\n    padding: theme.spacing(1),\n    width: '50px',\n    height: '50px',\n    margin: '10px',\n    transform: 'scale(1.25)'\n  },\n  hidden: {\n    padding: theme.spacing(1),\n    width: '50px',\n    height: '50px',\n    margin: '10px',\n    transform: 'scale(1.25)',\n    visibility: 'hidden'\n  },\n  activated: {\n    backgroundColor: theme.palette.secondary\n  }\n}));\n\nexport default function LettersMatrix({ letterPress, wordGroups }) {\n  const classes = useStyles();\n  const [state] = useGameplayContext();\n\n  function FormRow({ subLetters, row }) {\n\n    function Button({ letter, i }) {\n      const [animate, setAnimate] = useState(false);\n      const { light, base, dark } = colors[(i + 1) * row] || colors[0];\n\n      function conceal(e) {\n        e.persist()\n        letterPress(row, i)\n      }\n\n      useEffect(() => {\n        state.currentGuess.forEach(coord => {\n          if (coord.x === row - 1 && coord.y === i) {\n            setAnimate(true)\n          }\n        })\n      }, [i])\n\n      return (\n        <>\n          {letter ? <Fab\n            style={{ backgroundColor: base, backgroundImage: `radial-gradient(rgba(255,255,255,.3), ${light}, ${base}, ${dark}, rgba(0,0,0,.7))` }}\n            onClick={conceal}\n            className={!animate ? classes.fab : `${classes.fab} ${classes.hidden}`}>\n            {letter}\n          </Fab>\n            : <Fab className={classes.hidden}>{\"\"}</Fab>\n          }\n        </>\n      )\n    }\n\n    return (\n      <React.Fragment>\n        <Grid item>\n          {subLetters.map((letter, i) => (\n            <Button letter={letter} key={i} i={i} />\n          ))}\n        </Grid>\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={1} justify=\"center\">\n        {\n          state.puzzle.puzzle.length ?\n            <>\n              <Grid container item justify=\"center\" xs={12} spacing={wordGroups.length > 2 ? 3 : 4}>\n                <FormRow row={1} subLetters={state.puzzle.puzzle[0]} />\n              </Grid>\n              <Grid container item justify=\"center\" xs={12} spacing={wordGroups.length > 2 ? 3 : 4}>\n                <FormRow row={2} subLetters={state.puzzle.puzzle[1]} />\n              </Grid>\n              <Grid container item justify=\"center\" xs={12} spacing={wordGroups.length > 2 ? 3 : 4}>\n                <FormRow row={3} subLetters={state.puzzle.puzzle[2]} />\n              </Grid>\n              {\n                state.puzzle.puzzle.length > 3 ?\n                  <Grid container item justify=\"center\" xs={12} spacing={3}>\n                    <FormRow row={4} subLetters={state.puzzle.puzzle[3]} />\n                  </Grid>\n                  : null\n              }\n            </>\n            : null\n        }\n      </Grid>\n    </div>\n  );\n}","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport { dispatchGetWord } from '../../utility/API';\nimport { useGameplayContext } from '../../utility/GlobalState'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: '100%'\n    },\n    paperFullScreen: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: '100%'\n    },\n    button: {\n        borderRadius: '10px',\n        lineHeight: 2,\n        background: `radial-gradient(${theme.palette.secondary.light}, ${theme.palette.secondary.main}, ${theme.palette.secondary.dark})`,\n        textAlign: 'center',\n        color: 'white',\n        textShadow: '0px 1px 2px black',\n        fontSize: '1.25em',\n        fontWeight: '700',\n        padding: '.5em 2em'\n    },\n    spacing: {\n        marginBottom: '7em'\n    },\n    title: {\n        marginTop: '10em',\n        color: theme.palette.secondary.main\n    }\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"down\" ref={ref} {...props} />;\n});\n\nexport default function DialogEl({ title, buttonElement, textContent, children, accept, show = false, outsideClose = () => null }) {\n    const classes = useStyles();\n    const [, dispatch] = useGameplayContext();\n    const [open, setOpen] = React.useState(show);\n\n    useEffect(() => {\n        setOpen(show)\n    }, [show])\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n        outsideClose();\n    };\n\n    return (\n        <div>\n            {React.cloneElement(buttonElement, { onClick: handleClickOpen })}\n            <Dialog\n                className={classes.root}\n                classes={{ scrollPaper: classes.root, paperFullScreen: classes.paperFullScreen }}\n                fullScreen={true}\n                open={open}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n            >\n                <DialogTitle classes={{ root: classes.title }} id=\"alert-dialog-slide-title\">\n                    {title}\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-slide-description\">\n                        {textContent}\n                    </DialogContentText>\n                </DialogContent>\n                {children}\n                <DialogActions classes={{ spacing: classes.spacing }}>\n                    {accept ?\n                        <>\n                            <Button onClick={handleClose} className={classes.button} >\n                                No!\n                            </Button>\n                            <Button className={classes.button} onClick={() => { handleClose(); accept() }} >\n                                Yes!\n                            </Button>\n                        </>\n                        :\n                        <Button className={classes.button} onClick={() => { handleClose(); dispatchGetWord(dispatch) }}>\n                            New Game\n                        </Button>\n                    }\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Dialog from './UI/Dialog';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { useGameplayContext } from '../utility/GlobalState';\nimport * as actions from '../utility/actions';\n\nconst useStyles = makeStyles((theme) => {\n  return {\n    root: {\n      flexGrow: 1,\n      margin: '2em 3em 1em'\n    },\n    button: {\n      borderRadius: '10px',\n      lineHeight: 2,\n      background: `radial-gradient(${theme.palette.secondary.light}, ${theme.palette.secondary.main}, ${theme.palette.secondary.dark})`,\n      textAlign: 'center',\n      color: 'white',\n      textShadow: '0px 1px 2px black',\n      fontSize: '1.25em',\n      fontWeight: '700',\n      padding: '.5em 2em'\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n    hintButton: {\n      position: 'fixed',\n      top: 0,\n      right: 0\n    }\n  }\n});\n\nfunction ButtonElement({ hintButton, onClick }) {\n  return (\n    <IconButton\n      className={hintButton}\n      onClick={onClick}\n      color=\"secondary\"\n    >\n      <HelpOutline />\n    </IconButton>\n  )\n}\n\nexport default function ConfigClues({\n  dispatchGetWord, dispatchGetHint\n}) {\n  const classes = useStyles();\n  const [checked, setChecked] = useState(false);\n  const [state, dispatch] = useGameplayContext();\n\n  useEffect(() => {\n    setChecked(state.hintPreference)\n  }, [state.hintPreference])\n\n  function accept() {\n    dispatchChange()\n    dispatchGetHint()\n  }\n\n  function handleChange(e) {\n    setChecked(!checked)\n  }\n\n  function dispatchChange() {\n    localStorage.setItem(\"preference\", checked)\n    dispatch({ type: actions.SET_HINT_PREFERENCE, payload: checked })\n  }\n\n  return (\n    <div className={classes.root}>\n      <Grid container justify=\"center\" alignItems=\"baseline\" spacing={3}>\n        <Grid item>\n          <Button\n            onClick={dispatchGetWord}\n            variant=\"contained\"\n            className={classes.button}\n          >\n            New Game\n          </Button>\n        </Grid>\n      </Grid>\n      {!state.hintPreference ? <Dialog\n        title=\"Too hard?\"\n        accept={accept}\n        textContent=\"Would you like a hint?\"\n        buttonElement={<ButtonElement dispatchGetHint={dispatchGetHint}\n          hintButton={classes.hintButton} />}\n      >\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={checked}\n              onChange={handleChange}\n              name=\"hintPreference\"\n              color=\"primary\"\n            />\n          }\n          label=\"Check to not ask again.\"\n        />\n      </Dialog> : <ButtonElement onClick={dispatchGetHint}\n        hintButton={classes.hintButton} />}\n    </div>\n  );\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { colors } from '../utility/API';\r\nimport { useGameplayContext } from '../utility/GlobalState'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fab: {\r\n        textAlign: 'center',\r\n        color: 'white',\r\n        textShadow: '0px 1px 2px black',\r\n        fontSize: '1em',\r\n        fontWeight: '600',\r\n        margin: '1.5px',\r\n        transform: 'scale(.85)'\r\n    },\r\n    root: {\r\n        minHeight: '2.75em',\r\n        marginBottom: '1.5em',\r\n        marginTop: '1em'\r\n    }\r\n}))\r\n\r\nfunction GuessDisplay({ classesApplied, classAttr }) {\r\n    const classes = useStyles();\r\n    const [state] = useGameplayContext();\r\n\r\n    function getColor(x, y) {\r\n        return colors[(x + 1) * y];\r\n    }\r\n\r\n    return (\r\n        <Grid className={classes.root} container justify=\"center\">\r\n            {state.currentGuess.map((guess, i) =>\r\n                <Grid key={i} item>\r\n                    <Fab\r\n                        size=\"small\"\r\n                        style={{\r\n                            backgroundColor: getColor(guess.x, guess.y).base,\r\n                            backgroundImage: `radial-gradient(\r\n                            rgba(255,255,255,.3), \r\n                            ${getColor(guess.x, guess.y).light},\r\n                            ${getColor(guess.x, guess.y).base}, \r\n                            ${getColor(guess.x, guess.y).dark}, \r\n                            rgba(0,0,0,.7))`\r\n                        }}\r\n                        className={classAttr ? `${classes.fab} ${classesApplied}` : classes.fab}>\r\n                        {state.puzzle.puzzle[guess.x][guess.y]}\r\n                    </Fab>\r\n                </Grid>)}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default GuessDisplay;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { useGameplayContext } from '../utility/GlobalState';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    marginTop: '2em'\r\n  },\r\n  paper: {\r\n    height: 45,\r\n    width: 24,\r\n    textAlign: 'center',\r\n    lineHeight: '1.5em',\r\n    fontSize: '24px',\r\n    fontVariant: 'all-small-caps',\r\n  },\r\n  hidden: {\r\n    textAlign: 'center',\r\n    lineHeight: '1em',\r\n    fontSize: '24px',\r\n    fontVariant: 'all-small-caps',\r\n    height: 45,\r\n    width: 24,\r\n    background: \"#ebfbff\"\r\n  },\r\n  control: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  start: {\r\n    justifyContent: 'flex-start',\r\n    marginLeft: '.25em',\r\n    paddingLeft: 0,\r\n  },\r\n  end: {\r\n    justifyContent: 'flex-end',\r\n    marginRight: '1em'\r\n  },\r\n  center: {\r\n    justifyContent: 'center'\r\n  }\r\n}));\r\n\r\nexport default function SelectedLetters({ classAttr, classesApplied }) {\r\n  const classes = useStyles();\r\n  const [state] = useGameplayContext();\r\n\r\n  function determineRender(word) {\r\n    // console.log(word, state.finalizedWords)\r\n    // if (state.correctMap[word]) {\r\n    // return state.correctMap[word].map((letter, i) => {\r\n    // return state.puzzle.words.map((one) => {\r\n    return word.split(\"\").map((letter, i) => {\r\n\r\n      if (state.finalizedWords[word]) {\r\n        // if (!letter) {\r\n        return (\r\n          <Grid key={i} item>\r\n            <Paper className={`${classesApplied} ${classes.paper}`}>{letter}</Paper>\r\n          </Grid>\r\n        )\r\n      } else {\r\n        return (\r\n          <Grid key={i} item>\r\n            <Paper className={classes.hidden}>{\"\"}</Paper>\r\n          </Grid>\r\n        )\r\n      }\r\n    })\r\n    // })\r\n    // }\r\n  }\r\n\r\n  return (\r\n    <Grid container className={classes.root} spacing={state.puzzle.words.length === 4 ? 2 : 1}>\r\n      {state.puzzle.words.map((word, index) => (\r\n        <Grid item xs={state.puzzle.words.length === 4 ? 6 : 12} key={index}>\r\n          <Grid className={(index === 0 || index === 2) && state.puzzle.words.length === 4 ? classes.end : (index === 1 || index === 3) && state.puzzle.words.length === 4 ? classes.start : classes.center} container spacing={1}>\r\n            {determineRender(word)}\r\n          </Grid>\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  )\r\n}","import React, { useState, useEffect } from 'react';\nimport { colors } from '../utility/API';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport LettersMatrix from './LettersMatrix';\nimport ConfigClues from './ConfigClues';\nimport GuessDisplay from './GuessDisplay';\nimport SelectedLetters from './SelectedLetters';\nimport { findWordGroups, dispatchGetWord } from '../utility/API';\nimport { useGameplayContext } from '../utility/GlobalState';\nimport Dialog from './UI/Dialog'\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport * as actions from '../utility/actions';\n\nconst useStyles = makeStyles((theme) => ({\n    text: {\n        textAlign: 'center',\n        color: 'white',\n        textShadow: `1px 1px 1px ${colors[1].base}`\n    },\n    color1: {\n        backgroundColor: colors[1].light\n    },\n    color2: {\n        backgroundColor: colors[3].light\n    },\n    color3: {\n        backgroundColor: colors[1].dark\n    },\n    color4: {\n        backgroundColor: colors[3].dark\n    },\n    linearRoot: {\n        '& > * + *': {\n            marginTop: theme.spacing(2),\n        },\n        margin: '48vh 10vw auto'\n    },\n    animate: {\n        animation: 'pop ease 2s'\n    },\n    plopAnimate: {\n        animation: 'plop 600ms ease reverse'\n    }\n}))\n\nfunction MainPage() {\n    const classes = useStyles();\n    const [wordGroups, setWordGroups] = useState([]);\n    const [state, dispatch] = useGameplayContext();\n    const [animate, setAnimate] = useState(false);\n    const [show, setShow] = useState(false);\n    const [tryAgain, setTryAgain] = useState(false);\n    const [gameWinTimer, setGameWinTimer] = useState(null);\n\n    useEffect(() => {\n        const randWordgroups = findWordGroups();\n        setWordGroups(randWordgroups);\n        setTimeout(() => setTryAgain(true), 1500)\n\n        return () => {\n            clearTimeout(gameWinTimer)\n            // setGameWinTimer(null)\n        }\n    }, []);\n\n    useEffect(() => {\n        if (wordGroups.length) {\n            dispatchGetWord(dispatch);\n        }\n    }, [wordGroups, dispatch]);\n\n    useEffect(() => {\n        let correctMap = {}\n        if (state.puzzle) {\n            for (let word in state.puzzle.wordPath) {\n                if (!correctMap[word]) {\n                    correctMap[word] = []\n                    for (let i = 0; i < word.length; i++) {\n                        correctMap[word].push(false)\n                    }\n                }\n                for (let i = 0; i < state.currentGuess.length; i++) {\n                    if (JSON.stringify(state.currentGuess[i]) === JSON.stringify(state.puzzle.wordPath[word][i])) {\n                        if (state.currentGuess.length > 1) {\n                            if (correctMap[word][i - 1] === state.puzzle.wordPath[word][i - 1]) {\n                                correctMap[word][i] = state.puzzle.wordPath[word][i]\n                            }\n                        } else {\n                            dispatch({\n                                type: actions.CURRENT_WORD_PROGRESS,\n                                payload: word\n                            })\n                            correctMap[word][i] = state.puzzle.wordPath[word][i]\n                        }\n                    } else {\n                        correctMap[word][i] = false\n                    }\n                }\n            }\n\n            let skippedArr = []\n            for (let word in correctMap) {\n                if (correctMap[word].filter(el => el).length === word.length) {\n                    setAnimate(true);\n                    setTimeout(() => {\n                        dispatch({\n                            type: actions.FINALIZE_WORD,\n                            payload: word\n                        })\n                        dispatch({\n                            type: actions.RESET_GUESSES\n                        })\n                        setAnimate(false);\n                        determineWin()\n                    }, 1200)\n                }\n                if (!correctMap[word][state.currentGuess.length - 1]) {\n                    skippedArr.push(word)\n                }\n                if (state.finalizedWords[word]) {\n                    correctMap[word] = state.puzzle.wordPath[word]\n                }\n            }\n            if (skippedArr.length === state.puzzle.words.length && state.currentGuess.length) {\n                dispatch({\n                    type: actions.RESET_GUESSES\n                })\n                dispatch({\n                    type: actions.CURRENT_WORD_PROGRESS,\n                    payload: \"\"\n                })\n            }\n\n            dispatch({\n                type: actions.CORRECT_MAP,\n                payload: correctMap\n            })\n            setTryAgain(false)\n        }\n    }, [state.currentGuess, state.puzzle, dispatch, state.finalizedWords]);\n\n    function determineWin() {\n        if (state.puzzle) {\n            if (Object.keys(state.finalizedWords).length === state.puzzle.words.length) {\n                setShow(true)\n            }\n        }\n    }\n\n    function dispatchGetHint() {\n        if (!state.currentWordProgress.length) {\n            for (let key in state.correctMap) {\n                if (state.correctMap[key].filter(el => !el).length > 0) {\n                    return mockLetterPress(key)\n                }\n            }\n        } else {\n            mockLetterPress(state.currentWordProgress)\n        }\n    }\n\n    function mockLetterPress(key) {\n        let openIndex = state.correctMap[key].indexOf(false);\n        let index = state.puzzle.wordPath[key][openIndex];\n        if (index) {\n            let { x, y } = state.puzzle.wordPath[key][openIndex]\n            return letterPress(x + 1, y)\n        } else {\n            return\n        }\n    }\n\n    function letterPress(row, i) {\n        dispatch({\n            type: actions.LETTER_PRESS,\n            payload: {\n                x: row - 1, y: i\n            }\n        })\n    }\n\n    function outsideClose() {\n        setShow(false)\n    }\n\n    if (state.puzzle) {\n        return (<>\n            <ConfigClues\n                dispatchGetWord={() => dispatchGetWord(dispatch)}\n                dispatchGetHint={dispatchGetHint}\n            />\n            <GuessDisplay\n                classAttr={animate}\n                classesApplied={classes.animate}\n            />\n            <LettersMatrix\n                letterPress={letterPress}\n                wordGroups={wordGroups}\n            />\n            <SelectedLetters\n                classesApplied={classes.plopAnimate}\n            />\n            <Dialog\n                title=\"Congratulations!\"\n                show={show}\n                outsideClose={outsideClose}\n                buttonElement={<></>}\n                textContent={\"Game Win!!\"}\n            />\n        </>);\n    } else {\n        return <div className={classes.linearRoot}>\n            <Typography classes={{ root: classes.text }} variant=\"h4\" gutterBottom>\n                Loading...\n            </Typography>\n            <LinearProgress classes={{\n                colorPrimary: classes.color1,\n                barColorPrimary: classes.color3\n            }} />\n            <LinearProgress classes={{\n                colorPrimary: classes.color2,\n                barColorPrimary: classes.color4\n            }} />\n\n            {tryAgain ? <Typography onClick={() => dispatchGetWord(dispatch)} classes={{ root: classes.text }} variant=\"h6\" gutterBottom>\n                Click here if nothing loads...\n            </Typography> : null}\n        </div>\n    }\n\n}\n\nexport default MainPage;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MainPage from './components/MainPage'\nimport { GameplayProvider } from './utility/GlobalState'\nimport './App.css';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: '3em'\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <main className={classes.root}>\n      <GameplayProvider>\n        <MainPage />\n      </GameplayProvider>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}