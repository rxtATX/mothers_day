{"version":3,"sources":["utility/API.js","utility/classGame.js","utility/GlobalState.js","utility/actions.js","components/LettersMatrix.js","components/UI/Dialog.js","components/ConfigClues.js","components/GuessDisplay.js","components/SelectedLetters.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["twoDArray","colors","light","base","dark","findWordGroups","getRandom","length","len","Math","floor","random","recursiveGetWord","data","word","replace","validateWord","dispatchGetWord","dispatch","wordGroups","Promise","all","map","group","letter","num","q","i","fetch","getWord","then","res","el","json","third","fourth","first","second","arr","filter","join","reduce","a","b","type","payload","catch","err","console","log","PuzzleMaker","words","this","moveTypes","puzzle","puzzleLength","letterCount","currentCoords","wordPath","getParameters","sqrt","sampleRow","push","JSON","parse","stringify","x","generateRandomNumber","y","generateRandomCoordinates","trapped","j","checkCoords","Error","nextMove","generateEmptyPuzzle","message","generatePuzzle","defaultState","hintPreference","localStorage","getItem","currentGuess","finalizedWords","finalizedWordCount","correctMap","GameplayContext","createContext","id","name","priority","Provider","reducer","state","action","finalizedWordPath","forEach","coord","hintLetters","GameplayProvider","value","props","useReducer","useGameplayContext","useContext","useStyles","makeStyles","theme","root","flexGrow","fab","textAlign","color","textShadow","fontSize","fontWeight","padding","spacing","width","height","margin","transform","hidden","visibility","activated","backgroundColor","palette","secondary","LettersMatrix","letterPress","classes","FormRow","subLetters","row","Button","useState","animate","setAnimate","useEffect","Fab","style","backgroundImage","onClick","e","persist","className","Fragment","Grid","item","key","container","justify","xs","display","alignItems","justifyContent","paperFullScreen","button","borderRadius","lineHeight","background","main","marginBottom","title","marginTop","Transition","React","forwardRef","ref","Slide","direction","DialogEl","buttonElement","textContent","children","accept","show","outsideClose","open","setOpen","handleClose","cloneElement","Dialog","scrollPaper","fullScreen","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","paper","text","hintButton","position","top","right","ButtonElement","IconButton","ConfigClues","dispatchGetHint","checked","setChecked","variant","setItem","FormControlLabel","control","Checkbox","onChange","label","minHeight","GuessDisplay","classesApplied","classAttr","getColor","guess","size","fontVariant","start","marginLeft","paddingLeft","end","marginRight","center","SelectedLetters","index","split","Paper","determineRender","color1","color2","color3","color4","linearRoot","animation","plopAnimate","MainPage","setWordGroups","setShow","tryAgain","setTryAgain","gameWinTimer","setGameWinTimer","randWordgroups","setTimeout","clearTimeout","skippedArr","Object","keys","openIndex","indexOf","Typography","gutterBottom","LinearProgress","colorPrimary","barColorPrimary","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.470488cf.chunk.js","sourcesContent":["const alpha = \"qwertyuiopasdfghjklzxcvbnm\";\r\nconst twoDArray = [\r\n    [4, 4, 4, 4],\r\n    [5, 6, 5],\r\n    [5, 4]\r\n]\r\nexport const colors = [\r\n    { light: '#ef9a9a', base: '#e57373', dark: '#ef5350' },\r\n    { light: '#ce93d8', base: '#ba68c8', dark: '#ab47bc' },\r\n    { light: '#90caf9', base: '#64b5f6', dark: '#42a5f5' },\r\n    { light: '#80deea', base: '#4dd0e1', dark: '#26c6da' },\r\n    { light: '#80cbc4', base: '#4db6ac', dark: '#26a69a' },\r\n    { light: '#fff59d', base: '#fff176', dark: '#ffee58' },\r\n    { light: '#ffcc80', base: '#ffb74d', dark: '#ffa726' },\r\n    { light: '#ec407a', base: '#e91e63', dark: '#d81b60' },\r\n    { light: '#f48fb1', base: '#f06292', dark: '#ec407a' },\r\n    { light: '#ef9a9a', base: '#e57373', dark: '#ef5350' },\r\n    { light: '#ce93d8', base: '#ba68c8', dark: '#ab47bc' },\r\n    { light: '#90caf9', base: '#64b5f6', dark: '#42a5f5' },\r\n    { light: '#80deea', base: '#4dd0e1', dark: '#26c6da' },\r\n    { light: '#80cbc4', base: '#4db6ac', dark: '#26a69a' },\r\n    { light: '#fff59d', base: '#fff176', dark: '#ffee58' },\r\n    { light: '#ffcc80', base: '#ffb74d', dark: '#ffa726' },\r\n    { light: '#ec407a', base: '#e91e63', dark: '#d81b60' },\r\n    { light: '#f48fb1', base: '#f06292', dark: '#ec407a' },\r\n]\r\nexport function findWordGroups() {\r\n    return twoDArray[getRandom(twoDArray.length)]\r\n}\r\n\r\nexport function getRandom(len) {\r\n    return Math.floor(Math.random() * len)\r\n}\r\nexport function getLetter(rand) {\r\n    return alpha[rand]\r\n}\r\nexport function getWord(letter, num) {\r\n    let q = \"\"\r\n    for (let i = 0; i < num - 1; i++) {\r\n        q += \"?\"\r\n    }\r\n    return fetch(`https://cors-anywhere.herokuapp.com/https://api.datamuse.com/words?sp=${letter}${q}`)\r\n}\r\n\r\nfunction recursiveGetWord(data) {\r\n    let word = data[getRandom(data.length)].word;\r\n    if (!validateWord(word)) {\r\n        recursiveGetWord(data)\r\n    }\r\n    else return word\r\n}\r\n\r\nfunction validateWord(word) {\r\n    return word.replace(/[^a-zA-Z]/gmi, '') === word\r\n}\r\n\r\nexport function dispatchGetWord(dispatch) {\r\n    let wordGroups = findWordGroups();\r\n    Promise.all(wordGroups.map(group => getWord(getLetter(getRandom(26)), group)))\r\n        .then(res => res.map(el => el.json()))\r\n        .then(res => {\r\n            Promise.all(res)\r\n                .then(data => {\r\n                    let first = recursiveGetWord(data[0])\r\n                    let second = recursiveGetWord(data[1])\r\n                    let third, fourth;\r\n                    if (data[2]) {\r\n                        third = recursiveGetWord(data[2])\r\n                    }\r\n                    if (data[3]) {\r\n                        fourth = recursiveGetWord(data[3])\r\n                    }\r\n                    let arr = [first, second, third, fourth].filter(el => el)\r\n                    if (arr.length === wordGroups.length && arr.join(\"\").length === wordGroups.reduce((a, b) => a + b)) {\r\n                        dispatch({\r\n                            type: 'SET_PUZZLE_CONSTRUCTOR',\r\n                            payload: arr\r\n                        })\r\n                    } else {\r\n                        dispatchGetWord(dispatch)\r\n                    }\r\n                })\r\n        })\r\n        .catch(err => console.log(err));\r\n}","export default class PuzzleMaker {\n\tconstructor(words) {\n\t\tthis.words = words;\n\t\tthis.moveTypes = [-1, 0, 1];\n\t\tthis.puzzle = [];\n\t\tthis.puzzleLength = 0;\n\t\tthis.letterCount = 0;\n\t\tthis.currentCoords = {};\n\t\tthis.wordPath = {};\n\t\tthis.getParameters();\n\t}\n\n\tgetParameters() {\n\t\tthis.letterCount = 0;\n\t\tfor (let word of this.words) {\n\t\t\tthis.letterCount += word.length;\n\t\t}\n\n\t\tthis.puzzleLength = Math.sqrt(this.letterCount);\n\t}\n\n\tgenerateEmptyPuzzle() {\n\t\tthis.puzzle = [];\n\t\tconst sampleRow = [];\n\n\t\tfor (let i = 0; i < this.puzzleLength; i++) {\n\t\t\tsampleRow.push(0);\n\t\t}\n\n\t\tfor (let i = 0; i < this.puzzleLength; i++) {\n\t\t\tthis.puzzle.push(JSON.parse(JSON.stringify(sampleRow)));\n\t\t}\n\t}\n\n\tgenerateRandomNumber() {\n\t\treturn Math.floor(Math.random() * (this.puzzleLength));\n\t}\n\n\tgenerateRandomCoordinates() {\n\t\tthis.currentCoords = {\n\t\t\tx: this.generateRandomNumber(),\n\t\t\ty: this.generateRandomNumber()\n\t\t};\n\n\t\tif (this.puzzle[this.currentCoords.x][this.currentCoords.y]) {\n\t\t\tthis.generateRandomCoordinates();\n\t\t}\n\t}\n\n\tcheckCoords() {\n\t\tlet trapped = true;\n\t\tfor (var i = 0; i < this.moveTypes.length; i++) {\n\t\t\tfor (var j = 0; j < this.moveTypes.length; j++) {\n\t\t\t\tconst x = this.currentCoords.x + this.moveTypes[i];\n\t\t\t\tconst y = this.currentCoords.y + this.moveTypes[j];\n\n\t\t\t\tif (x !== -1 && y !== -1 && x !== this.puzzleLength && y !== this.puzzleLength) {\n\t\t\t\t\tif (!this.puzzle[x][y]) {\n\t\t\t\t\t\ttrapped = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn trapped;\n\t}\n\n\tnextMove() {\n\t\tif (this.checkCoords()) {\n\t\t\tthrow new Error()\n\t\t}\n\n\t\tlet x = this.currentCoords.x + this.moveTypes[Math.floor(Math.random() * this.moveTypes.length)];\n\t\tlet y = this.currentCoords.y + this.moveTypes[Math.floor(Math.random() * this.moveTypes.length)];\n\n\t\tif (x === -1\n\t\t\t|| y === -1\n\t\t\t|| x === this.puzzleLength\n\t\t\t|| y === this.puzzleLength\n\t\t\t|| this.puzzle[x][y]\n\t\t) {\n\t\t\tthis.nextMove();\n\t\t} else {\n\t\t\tthis.currentCoords = { x: x, y: y };\n\t\t}\n\t}\n\n\tgeneratePuzzle() {\n\t\tthis.generateEmptyPuzzle();\n\n\t\ttry {\n\n\t\t\tfor (let word of this.words) {\n\t\t\t\tthis.generateRandomCoordinates();\n\t\t\t\tthis.wordPath[word] = [];\n\n\t\t\t\tfor (let letter of word) {\n\t\t\t\t\tthis.nextMove();\n\t\t\t\t\tthis.puzzle[this.currentCoords.x][this.currentCoords.y] = letter;\n\t\t\t\t\tthis.wordPath[word].push(this.currentCoords);\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (!err.message) return this.generatePuzzle();\n\n\t\t\tthrow err\n\t\t}\n\t}\n\n\tgetPuzzle() {\n\t\treturn this.puzzle;\n\t}\n\tgetPuzzelPath() {\n\t\treturn this.wordPath\n\t}\n}\n\n// const threeWords = new PuzzleMaker([\"which\", \"irony\", \"hamper\"]);\n\n// const print = function (puzzle){\n// \tif(puzzle.length === 5){\n// \t\tconsole.log(`${puzzle[0][0]}-${puzzle[0][1]}-${puzzle[0][2]}-${puzzle[0][3]}-${puzzle[0][4]}`);\n// \t\tconsole.log('-----------');\n// \t\tconsole.log(`${puzzle[1][0]}-${puzzle[1][1]}-${puzzle[1][2]}-${puzzle[1][3]}-${puzzle[1][4]}`);\n// \t\tconsole.log('-----------');\n// \t\tconsole.log(`${puzzle[2][0]}-${puzzle[2][1]}-${puzzle[2][2]}-${puzzle[2][3]}-${puzzle[2][4]}`);\n// \t\tconsole.log('-----------');\n// \t\tconsole.log(`${puzzle[3][0]}-${puzzle[3][1]}-${puzzle[3][2]}-${puzzle[3][3]}-${puzzle[3][4]}`);\n// \t\tconsole.log('-----------');\n// \t\tconsole.log(`${puzzle[4][0]}-${puzzle[4][1]}-${puzzle[4][2]}-${puzzle[4][3]}-${puzzle[4][4]}`);\n// \t} else if(puzzle.length === 4){\n// \t\tconsole.log(`${puzzle[0][0]}-${puzzle[0][1]}-${puzzle[0][2]}-${puzzle[0][3]}`);\n// \t\tconsole.log('-----------');\n// \t\tconsole.log(`${puzzle[1][0]}-${puzzle[1][1]}-${puzzle[1][2]}-${puzzle[1][3]}`);\n// \t\tconsole.log('-----------');\n// \t\tconsole.log(`${puzzle[2][0]}-${puzzle[2][1]}-${puzzle[2][2]}-${puzzle[2][3]}`);\n// \t\tconsole.log('-----------');\n// \t\tconsole.log(`${puzzle[3][0]}-${puzzle[3][1]}-${puzzle[3][2]}-${puzzle[3][3]}`);\n// \t} else {\n// \t\tconsole.log(`${puzzle[0][0]}-${puzzle[0][1]}-${puzzle[0][2]}`);\n// \t\tconsole.log('-----------');\n// \t\tconsole.log(`${puzzle[1][0]}-${puzzle[1][1]}-${puzzle[1][2]}`);\n// \t\tconsole.log('-----------');\n// \t\tconsole.log(`${puzzle[2][0]}-${puzzle[2][1]}-${puzzle[2][2]}`);\n// \t}\n// }\n// threeWords.generatePuzzle();\n\n// print(threeWords.getPuzzle())\n// console.log(threeWords.getPuzzelPath());\n// console.log(threeWords.count);\n\n\n// const alpha = ['abcd', 'efgh', 'ijkl', 'mnopq', 'rstu','vwxy'];\n// const five = new PuzzleMaker(alpha);\n// five.generatePuzzle();\n// print(five.getPuzzle())\n// console.log(five.getPuzzelPath());\n// console.log(five.count);\n\n","import React, { createContext, useReducer, useContext } from \"react\";\r\nimport * as actions from './actions';\r\nimport PuzzleMaker from \"./classGame\";\r\n\r\nconst defaultState = {\r\n    hintPreference: JSON.parse(localStorage.getItem(\"preference\")) || false,\r\n    currentGuess: [],\r\n    finalizedWords: {},\r\n    finalizedWordCount: 0,\r\n    correctMap: {}\r\n}\r\n\r\nconst GameplayContext = createContext({\r\n    id: \"\",\r\n    name: \"\",\r\n    priority: false\r\n});\r\nconst { Provider } = GameplayContext;\r\n\r\nfunction reducer(state = defaultState, action) {\r\n    switch (action.type) {\r\n        case actions.SET_PUZZLE_CONSTRUCTOR:\r\n            let puzzle = new PuzzleMaker(action.payload);\r\n            puzzle.generatePuzzle();\r\n\r\n            if (puzzle.length % 2 !== 0) {\r\n                puzzle = new PuzzleMaker(action.payload)\r\n                puzzle.generatePuzzle()\r\n            }\r\n            return {\r\n                ...state,\r\n                ...defaultState,\r\n                puzzle,\r\n            }\r\n        case 'SET_HINT_PREFERENCE':\r\n            return {\r\n                ...state,\r\n                hintPreference: action.payload\r\n            }\r\n        case \"LETTER_PRESS\":\r\n            return {\r\n                ...state,\r\n                currentGuess: [\r\n                    ...state.currentGuess,\r\n                    action.payload\r\n                ]\r\n            }\r\n        case \"RESET_GUESSES\":\r\n            return {\r\n                ...state,\r\n                currentGuess: []\r\n            }\r\n        case 'FINALIZE_WORD':\r\n            let finalizedWordPath = state.puzzle.wordPath[action.payload]\r\n            if (finalizedWordPath) finalizedWordPath.forEach(coord => {\r\n                state.puzzle.puzzle[coord.x][coord.y] = false\r\n            })\r\n            return {\r\n                ...state,\r\n                finalizedWords: {\r\n                    ...state.finalizedWords,\r\n                    [action.payload]: true\r\n                },\r\n                finalizedWordCount: state.finalizedWordCount + 1\r\n            }\r\n        case 'GET_HINT':\r\n            return {\r\n                ...state,\r\n                hintLetters: []\r\n            }\r\n        case 'CORRECT_MAP':\r\n            return {\r\n                ...state,\r\n                correctMap: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction GameplayProvider({ value = {}, ...props }) {\r\n    const [state, dispatch] = useReducer(reducer, defaultState);\r\n\r\n    return <Provider value={[state, dispatch]} {...props} />;\r\n}\r\n\r\nfunction useGameplayContext() {\r\n    return useContext(GameplayContext);\r\n}\r\n\r\nexport { GameplayProvider, useGameplayContext };\r\n","export const SET_PUZZLE_CONSTRUCTOR = 'SET_PUZZLE_CONSTRUCTOR';","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\nimport Grid from '@material-ui/core/Grid';\nimport { colors } from '../utility/API';\nimport { useGameplayContext } from '../utility/GlobalState';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  fab: {\n    textAlign: 'center',\n    color: 'white',\n    textShadow: '0px 1px 2px black',\n    fontSize: '1.25em',\n    fontWeight: '700',\n    padding: theme.spacing(1),\n    width: '50px',\n    height: '50px',\n    margin: '10px',\n    transform: 'scale(1.25)'\n  },\n  hidden: {\n    padding: theme.spacing(1),\n    width: '50px',\n    height: '50px',\n    margin: '10px',\n    transform: 'scale(1.25)',\n    visibility: 'hidden'\n  },\n  activated: {\n    backgroundColor: theme.palette.secondary\n  }\n}));\n\nexport default function LettersMatrix({ letterPress, wordGroups }) {\n  const classes = useStyles();\n  const [state] = useGameplayContext();\n\n  function FormRow({ subLetters, row }) {\n\n    function Button({ letter, i }) {\n      const [animate, setAnimate] = useState(false);\n      const { light, base, dark } = colors[(i + 1) * row] || colors[0];\n\n      function conceal(e) {\n        e.persist()\n        letterPress(row, i)\n      }\n\n      useEffect(() => {\n        state.currentGuess.forEach(coord => {\n          if (coord.x === row - 1 && coord.y === i) {\n            setAnimate(true)\n          }\n        })\n      }, [i])\n\n      return (\n        <>\n          {letter ? <Fab\n            style={{ backgroundColor: base, backgroundImage: `radial-gradient(rgba(255,255,255,.3), ${light}, ${base}, ${dark}, rgba(0,0,0,.7))` }}\n            onClick={conceal}\n            className={!animate ? classes.fab : `${classes.fab} ${classes.hidden}`}>\n            {letter}\n          </Fab>\n            : <Fab className={classes.hidden}>{\"\"}</Fab>\n          }\n        </>\n      )\n    }\n\n    return (\n      <React.Fragment>\n        <Grid item>\n          {subLetters.map((letter, i) => (\n            <Button letter={letter} key={i} i={i} />\n          ))}\n        </Grid>\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={1} justify=\"center\">\n        {\n          state.puzzle.puzzle.length ?\n            <>\n              <Grid container item justify=\"center\" xs={12} spacing={wordGroups.length > 2 ? 3 : 4}>\n                <FormRow row={1} subLetters={state.puzzle.puzzle[0]} />\n              </Grid>\n              <Grid container item justify=\"center\" xs={12} spacing={wordGroups.length > 2 ? 3 : 4}>\n                <FormRow row={2} subLetters={state.puzzle.puzzle[1]} />\n              </Grid>\n              <Grid container item justify=\"center\" xs={12} spacing={wordGroups.length > 2 ? 3 : 4}>\n                <FormRow row={3} subLetters={state.puzzle.puzzle[2]} />\n              </Grid>\n              {\n                state.puzzle.puzzle.length > 3 ?\n                  <Grid container item justify=\"center\" xs={12} spacing={3}>\n                    <FormRow row={4} subLetters={state.puzzle.puzzle[3]} />\n                  </Grid>\n                  : null\n              }\n            </>\n            : null\n        }\n      </Grid>\n    </div>\n  );\n}","import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { dispatchGetWord } from '../../utility/API';\r\nimport { useGameplayContext } from '../../utility/GlobalState'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        width: '100%'\r\n    },\r\n    paperFullScreen: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        width: '100%'\r\n    },\r\n    button: {\r\n        borderRadius: '10px',\r\n        lineHeight: 2,\r\n        background: `radial-gradient(${theme.palette.secondary.light}, ${theme.palette.secondary.main}, ${theme.palette.secondary.dark})`,\r\n        textAlign: 'center',\r\n        color: 'white',\r\n        textShadow: '0px 1px 2px black',\r\n        fontSize: '1.25em',\r\n        fontWeight: '700',\r\n        padding: '.5em 2em'\r\n    },\r\n    spacing: {\r\n        marginBottom: '7em'\r\n    },\r\n    title: {\r\n        marginTop: '10em',\r\n        color: theme.palette.secondary.main\r\n    }\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"down\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function DialogEl({ title, buttonElement, textContent, children, accept, show = false, outsideClose = () => null }) {\r\n    const classes = useStyles();\r\n    const [, dispatch] = useGameplayContext();\r\n    const [open, setOpen] = React.useState(show);\r\n\r\n    useEffect(() => {\r\n        setOpen(show)\r\n    }, [show])\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        outsideClose();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {React.cloneElement(buttonElement, { onClick: handleClickOpen })}\r\n            <Dialog\r\n                className={classes.root}\r\n                classes={{ scrollPaper: classes.root, paperFullScreen: classes.paperFullScreen }}\r\n                fullScreen={true}\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                <DialogTitle classes={{ root: classes.title }} id=\"alert-dialog-slide-title\">\r\n                    {title}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description\">\r\n                        {textContent}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                {children}\r\n                <DialogActions classes={{ spacing: classes.spacing }}>\r\n                    {accept ?\r\n                        <>\r\n                            <Button onClick={handleClose} className={classes.button} >\r\n                                No!\r\n                        </Button>\r\n                            <Button className={classes.button} onClick={() => { handleClose(); accept() }} >\r\n                                Yes!\r\n                        </Button>\r\n                        </>\r\n                        :\r\n                        <Button className={classes.button} onClick={() => { handleClose(); dispatchGetWord(dispatch) }}>\r\n                            New Game\r\n                        </Button>\r\n                    }\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport HelpOutline from '@material-ui/icons/HelpOutline';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Dialog from './UI/Dialog';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { useGameplayContext } from '../utility/GlobalState';\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n  return {\r\n    root: {\r\n      flexGrow: 1,\r\n      margin: '2em 3em 1em'\r\n    },\r\n    button: {\r\n      borderRadius: '10px',\r\n      lineHeight: 2,\r\n      background: `radial-gradient(${theme.palette.secondary.light}, ${theme.palette.secondary.main}, ${theme.palette.secondary.dark})`,\r\n      textAlign: 'center',\r\n      color: 'white',\r\n      textShadow: '0px 1px 2px black',\r\n      fontSize: '1.25em',\r\n      fontWeight: '700',\r\n      padding: '.5em 2em'\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'center',\r\n      color: theme.palette.text.secondary,\r\n    },\r\n    hintButton: {\r\n      position: 'fixed',\r\n      top: 0,\r\n      right: 0\r\n    }\r\n  }\r\n});\r\n\r\nfunction ButtonElement({ hintButton, onClick }) {\r\n  return (\r\n    <IconButton\r\n      className={hintButton}\r\n      onClick={onClick}\r\n      color=\"secondary\"\r\n    >\r\n      <HelpOutline />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default function ConfigClues({\r\n  dispatchGetWord, dispatchGetHint\r\n}) {\r\n  const classes = useStyles();\r\n  const [checked, setChecked] = useState(false);\r\n  const [state, dispatch] = useGameplayContext();\r\n\r\n  useEffect(() => {\r\n    setChecked(state.hintPreference)\r\n  }, [state.hintPreference])\r\n\r\n  function accept() {\r\n    dispatchChange()\r\n    dispatchGetHint()\r\n  }\r\n\r\n  function handleChange(e) {\r\n    setChecked(!checked)\r\n  }\r\n\r\n  function dispatchChange() {\r\n    localStorage.setItem(\"preference\", checked)\r\n    dispatch({ type: 'SET_HINT_PREFERENCE', payload: checked })\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container justify=\"center\" alignItems=\"baseline\" spacing={3}>\r\n        <Grid item>\r\n          <Button\r\n            onClick={dispatchGetWord}\r\n            variant=\"contained\"\r\n            className={classes.button}\r\n          >\r\n            New Game\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      {!state.hintPreference ? <Dialog\r\n        title=\"Too hard?\"\r\n        accept={accept}\r\n        textContent=\"Would you like a hint?\"\r\n        buttonElement={<ButtonElement dispatchGetHint={dispatchGetHint}\r\n          hintButton={classes.hintButton} />}\r\n      >\r\n        <FormControlLabel\r\n          control={\r\n            <Checkbox\r\n              checked={checked}\r\n              onChange={handleChange}\r\n              name=\"hintPreference\"\r\n              color=\"primary\"\r\n            />\r\n          }\r\n          label=\"Check to not ask again.\"\r\n        />\r\n      </Dialog> : <ButtonElement onClick={dispatchGetHint}\r\n        hintButton={classes.hintButton} />}\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { colors } from '../utility/API';\r\nimport { useGameplayContext } from '../utility/GlobalState'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fab: {\r\n        textAlign: 'center',\r\n        color: 'white',\r\n        textShadow: '0px 1px 2px black',\r\n        fontSize: '1em',\r\n        fontWeight: '600',\r\n        margin: '1.5px',\r\n        transform: 'scale(.85)'\r\n    },\r\n    root: {\r\n        minHeight: '2.75em',\r\n        marginBottom: '1.5em',\r\n        marginTop: '1em'\r\n    }\r\n}))\r\n\r\nfunction GuessDisplay({ classesApplied, classAttr }) {\r\n    const classes = useStyles();\r\n    const [state] = useGameplayContext();\r\n\r\n    function getColor(x, y) {\r\n        return colors[(x + 1) * y];\r\n    }\r\n\r\n    return (\r\n        <Grid className={classes.root} container justify=\"center\">\r\n            {state.currentGuess.map((guess, i) =>\r\n                <Grid key={i} item>\r\n                    <Fab\r\n                        size=\"small\"\r\n                        style={{\r\n                            backgroundColor: getColor(guess.x, guess.y).base,\r\n                            backgroundImage: `radial-gradient(\r\n                            rgba(255,255,255,.3), \r\n                            ${getColor(guess.x, guess.y).light},\r\n                            ${getColor(guess.x, guess.y).base}, \r\n                            ${getColor(guess.x, guess.y).dark}, \r\n                            rgba(0,0,0,.7))`\r\n                        }}\r\n                        className={classAttr ? `${classes.fab} ${classesApplied}` : classes.fab}>\r\n                        {state.puzzle.puzzle[guess.x][guess.y]}\r\n                    </Fab>\r\n                </Grid>)}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default GuessDisplay;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { useGameplayContext } from '../utility/GlobalState';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    marginTop: '2em'\r\n  },\r\n  paper: {\r\n    height: 45,\r\n    width: 24,\r\n    textAlign: 'center',\r\n    lineHeight: '1.5em',\r\n    fontSize: '24px',\r\n    fontVariant: 'all-small-caps',\r\n  },\r\n  hidden: {\r\n    textAlign: 'center',\r\n    lineHeight: '1em',\r\n    fontSize: '24px',\r\n    fontVariant: 'all-small-caps',\r\n    height: 45,\r\n    width: 24,\r\n    background: \"#ebfbff\"\r\n  },\r\n  control: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  start: {\r\n    justifyContent: 'flex-start',\r\n    marginLeft: '.25em',\r\n    paddingLeft: 0,\r\n  },\r\n  end: {\r\n    justifyContent: 'flex-end',\r\n    marginRight: '1em'\r\n  },\r\n  center: {\r\n    justifyContent: 'center'\r\n  }\r\n}));\r\n\r\nexport default function SelectedLetters({ classAttr, classesApplied }) {\r\n  const classes = useStyles();\r\n  const [state] = useGameplayContext();\r\n\r\n  function determineRender(word) {\r\n    // console.log(word, state.finalizedWords)\r\n    // if (state.correctMap[word]) {\r\n    // return state.correctMap[word].map((letter, i) => {\r\n    // return state.puzzle.words.map((one) => {\r\n    return word.split(\"\").map((letter, i) => {\r\n\r\n      if (state.finalizedWords[word]) {\r\n        // if (!letter) {\r\n        return (\r\n          <Grid key={i} item>\r\n            <Paper className={`${classesApplied} ${classes.paper}`}>{letter}</Paper>\r\n          </Grid>\r\n        )\r\n      } else {\r\n        return (\r\n          <Grid key={i} item>\r\n            <Paper className={classes.hidden}>{\"\"}</Paper>\r\n          </Grid>\r\n        )\r\n      }\r\n    })\r\n    // })\r\n    // }\r\n  }\r\n\r\n  return (\r\n    <Grid container className={classes.root} spacing={state.puzzle.words.length === 4 ? 2 : 1}>\r\n      {state.puzzle.words.map((word, index) => (\r\n        <Grid item xs={state.puzzle.words.length === 4 ? 6 : 12} key={index}>\r\n          <Grid className={(index === 0 || index === 2) && state.puzzle.words.length === 4 ? classes.end : (index === 1 || index === 3) && state.puzzle.words.length === 4 ? classes.start : classes.center} container spacing={1}>\r\n            {determineRender(word)}\r\n          </Grid>\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { colors } from '../utility/API';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LettersMatrix from './LettersMatrix';\r\nimport ConfigClues from './ConfigClues';\r\nimport GuessDisplay from './GuessDisplay';\r\nimport SelectedLetters from './SelectedLetters';\r\nimport { findWordGroups, dispatchGetWord } from '../utility/API';\r\nimport { useGameplayContext } from '../utility/GlobalState';\r\nimport Dialog from './UI/Dialog'\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    text: {\r\n        textAlign: 'center',\r\n        color: 'white',\r\n        textShadow: `1px 1px 1px ${colors[1].base}`\r\n    },\r\n    color1: {\r\n        backgroundColor: colors[1].light\r\n    },\r\n    color2: {\r\n        backgroundColor: colors[3].light\r\n    },\r\n    color3: {\r\n        backgroundColor: colors[1].dark\r\n    },\r\n    color4: {\r\n        backgroundColor: colors[3].dark\r\n    },\r\n    linearRoot: {\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n        margin: '48vh 10vw auto'\r\n    },\r\n    animate: {\r\n        animation: 'pop ease 2s'\r\n    },\r\n    plopAnimate: {\r\n        animation: 'plop 600ms ease reverse'\r\n    }\r\n}))\r\n\r\nfunction MainPage() {\r\n    const classes = useStyles();\r\n    const [wordGroups, setWordGroups] = useState([]);\r\n    const [state, dispatch] = useGameplayContext();\r\n    const [animate, setAnimate] = useState(false);\r\n    const [show, setShow] = useState(false);\r\n    const [tryAgain, setTryAgain] = useState(false);\r\n    const [gameWinTimer, setGameWinTimer] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const randWordgroups = findWordGroups();\r\n        setWordGroups(randWordgroups);\r\n        setTimeout(() => setTryAgain(true), 1500)\r\n\r\n        return () => {\r\n            clearTimeout(gameWinTimer)\r\n            // setGameWinTimer(null)\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (wordGroups.length) {\r\n            dispatchGetWord(dispatch);\r\n        }\r\n    }, [wordGroups, dispatch]);\r\n\r\n    useEffect(() => {\r\n        let correctMap = {}\r\n        if (state.puzzle) {\r\n            for (let word in state.puzzle.wordPath) {\r\n                if (!correctMap[word]) {\r\n                    correctMap[word] = []\r\n                    for (let i = 0; i < word.length; i++) {\r\n                        correctMap[word].push(false)\r\n                    }\r\n                }\r\n                for (let i = 0; i < state.currentGuess.length; i++) {\r\n                    if (JSON.stringify(state.currentGuess[i]) === JSON.stringify(state.puzzle.wordPath[word][i])) {\r\n                        if (state.currentGuess.length > 1) {\r\n                            if (correctMap[word][i - 1] === state.puzzle.wordPath[word][i - 1]) {\r\n                                correctMap[word][i] = state.puzzle.wordPath[word][i]\r\n                            }\r\n                        } else {\r\n                            correctMap[word][i] = state.puzzle.wordPath[word][i]\r\n                        }\r\n                    } else {\r\n                        correctMap[word][i] = false\r\n                    }\r\n                }\r\n            }\r\n\r\n            let skippedArr = []\r\n            for (let word in correctMap) {\r\n                if (correctMap[word].filter(el => el).length === word.length) {\r\n                    setAnimate(true);\r\n                    setTimeout(() => {\r\n                        dispatch({\r\n                            type: 'FINALIZE_WORD',\r\n                            payload: word\r\n                        })\r\n                        dispatch({\r\n                            type: 'RESET_GUESSES'\r\n                        })\r\n                        setAnimate(false);\r\n                    }, 2000)\r\n                }\r\n                if (!correctMap[word][state.currentGuess.length - 1]) {\r\n                    skippedArr.push(word)\r\n                }\r\n                if (state.finalizedWords[word]) {\r\n                    correctMap[word] = state.puzzle.wordPath[word]\r\n                }\r\n            }\r\n            if (skippedArr.length === state.puzzle.words.length && state.currentGuess.length) {\r\n                dispatch({\r\n                    type: 'RESET_GUESSES'\r\n                })\r\n            }\r\n\r\n            dispatch({\r\n                type: 'CORRECT_MAP',\r\n                payload: correctMap\r\n            })\r\n            setTryAgain(false)\r\n        }\r\n    }, [state.currentGuess, state.puzzle, dispatch, state.finalizedWords]);\r\n\r\n    useEffect(() => {\r\n        if (state.puzzle) {\r\n            if (Object.keys(state.finalizedWords).length === state.puzzle.words.length) {\r\n                setGameWinTimer(\r\n                    setTimeout(() => {\r\n                        setShow(true)\r\n                    }, 800)\r\n                )\r\n            }\r\n        }\r\n    }, [state.finalizedWords, state.puzzle])\r\n\r\n    function dispatchGetHint() {\r\n        for (let key in state.correctMap) {\r\n            if (state.correctMap[key].filter(el => !el).length > 0) {\r\n                let openIndex = state.correctMap[key].indexOf(false);\r\n                let { x, y } = state.puzzle.wordPath[key][openIndex]\r\n                return letterPress(x + 1, y)\r\n            }\r\n        }\r\n    }\r\n\r\n    function letterPress(row, i) {\r\n        dispatch({\r\n            type: 'LETTER_PRESS',\r\n            payload: {\r\n                x: row - 1, y: i\r\n            }\r\n        })\r\n    }\r\n\r\n    function outsideClose() {\r\n        setShow(false)\r\n    }\r\n\r\n    if (state.puzzle) {\r\n        return (<>\r\n            <ConfigClues\r\n                dispatchGetWord={() => dispatchGetWord(dispatch)}\r\n                dispatchGetHint={dispatchGetHint}\r\n            />\r\n            <GuessDisplay\r\n                classAttr={animate}\r\n                classesApplied={classes.animate}\r\n            />\r\n            <LettersMatrix\r\n                letterPress={letterPress}\r\n                wordGroups={wordGroups}\r\n            />\r\n            <SelectedLetters\r\n                classesApplied={classes.plopAnimate}\r\n            />\r\n            <Dialog\r\n                title=\"Congratulations!\"\r\n                show={show}\r\n                outsideClose={outsideClose}\r\n                buttonElement={<></>}\r\n                textContent={\"Game Win!!\"}\r\n            />\r\n        </>);\r\n    } else {\r\n        return <div className={classes.linearRoot}>\r\n            <Typography classes={{ root: classes.text }} variant=\"h4\" gutterBottom>\r\n                Loading...\r\n            </Typography>\r\n            <LinearProgress classes={{\r\n                colorPrimary: classes.color1,\r\n                barColorPrimary: classes.color3\r\n            }} />\r\n            <LinearProgress classes={{\r\n                colorPrimary: classes.color2,\r\n                barColorPrimary: classes.color4\r\n            }} />\r\n\r\n            {tryAgain ? <Typography onClick={() => dispatchGetWord(dispatch)} classes={{ root: classes.text }} variant=\"h6\" gutterBottom>\r\n                Click here if nothing loads...\r\n            </Typography> : null}\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\nexport default MainPage;\r\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MainPage from './components/MainPage'\nimport { GameplayProvider } from './utility/GlobalState'\nimport './App.css';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: '3em'\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <main className={classes.root}>\n      <GameplayProvider>\n        <MainPage />\n      </GameplayProvider>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}